#include "texture.h"
#include "stb_image.h"
#include <iostream>

Texture::Texture(const std::string& fileName)
{
	int width, height, numComponents;
    unsigned char* data = stbi_load((fileName).c_str(), &width, &height, &numComponents, 4);
	unsigned char* data3d = new unsigned char[width*height*4 *100];
    if(data == NULL)
		std::cerr << "Unable to load texture: " << fileName << std::endl;

	m_puTextureIDs = new GLuint[100];
	glGenTextures(1, &m_puTextureIDs[0]);

	for (int nIndx = 0; nIndx < width * height * 4 * 100; ++nIndx)
	{
		data3d[nIndx] = data[nIndx % (width * height * 4)];
	}

	glBindTexture(GL_TEXTURE_2D, m_puTextureIDs[0]);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width*10, height*10, 0, GL_RGBA, GL_UNSIGNED_BYTE, data3d);

	stbi_image_free(data);
	stbi_image_free(data3d);
}

Texture::~Texture()
{
	glDeleteTextures(1, &m_puTextureIDs[0]);
}

void Texture::Bind()
{
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, m_puTextureIDs[0]);
}
